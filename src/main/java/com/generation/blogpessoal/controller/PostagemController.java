package com.generation.blogpessoal.controller;

import java.util.List;
import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseStatus;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.server.ResponseStatusException;

import com.generation.blogpessoal.model.Postagem;
import com.generation.blogpessoal.repository.PostagemRepository;

import jakarta.validation.Valid;

@RestController
//Recebe requisi√ß√µes compostas por : 
//URL : Endere√ßo da nossa requisi√ß√£o,nesse caso o "/hello-world"
//Verbo : Qual m√©todo HTTP ser√° acionado , nesse caso o @GetMapping
//Corpo da requisi√ß√£o ( Request Body): Objeto que contem os dados que ser√£o atualizados ou criados , nesse caso o return "hello word"
//Ap√≥s receber e processar a requisi√ß√£o,a classe Controladora responde com :
//	Um c√≥digo de status HTTP
//O resultado desse processamento (Dados de uma consulta, por exemplo) inserido diretamente no corpo da resposta (Response Body)

@RequestMapping("/postagens")
//√â para mapear solicita√ß√µes para os m√©todos da classe controloadora, definir a URL (endere√ßo) padr√£o do recurso (em nosso exemplo: /postagens). 
//Ao digitar a url do servidor seguida da url do recurso, o Spring envia a requisi√ß√£o para a Classe respons√°vel pelo recurso com este endere√ßo.
//Exemplo: http://localhost:8080/postagens √© o endere√ßo do recurso postagens da Classe Controladora PostagemController.

//O rest Controller e o requestMapping PRECISAM ser necessariamente utilizados juntos 

@CrossOrigin(origins = "*", allowedHeaders = "*")
//indica que a Classe controladora permitir√° o recebimento de requisi√ß√µes realizadas de fora do dom√≠nio (localhost e futuramente da nuvem quando o
//Deploy da aplica√ß√£o for efetivado) ao qual ela pertence. Essa anota√ß√£o √© essencial para que o front-end ou aplicativo mobile, tenha acesso aos
//M√©todos e Recursos da nossa aplica√ß√£o (O termo t√©cnico √© consumir a API).
//Al√©m de liberar todas as Origens das requisi√ß√µes (par√¢metro origins), a anota√ß√£o libera tamb√©m os Cabe√ßalhos das Requisi√ß√µes (par√¢metro allowedHeaders), 
//que em alguns casos trazem informa√ß√µes essenciais para o correto funcionamento da aplica√ß√£o. Um bom exemplo √© o Token de Autoriza√ß√£o - Authorization 
//Token, que veremos mais √† frente, que tem a fun√ß√£o de autorizar o acesso √† um endpoint espec√≠fico, protegido pela autentica√ß√£o (login). Em produ√ß√£o, 
//recomenda-se substituir o * (asterisco) pelo endere√ßo na nuvem (deploy) do Frontend ou da aplica√ß√£o mobile.
public class PostagemController {

	@Autowired
	// Pedindo pro Spring instanciar um objeto que implemente a
	// postagemRepository,j√° que a mesma √© uma
	// interface,ent√£o sem a anota√ß√£o,eu n√£o iria conseguir usar;

	// T√°,mas por que n√£o mudar la no postagemRepository de interface pra classe?
	// Primeiro porque o JPARepository N√ÉO PERMITE que eu extenda para uma
	// classe,ele permite apenas que eu extenda para uma interface
	// Segundo,eu teria que implementar cada um dos m√©todos,ent√£o no final eu teria
	// que fazer todo o c√≥digo SQL;
	private PostagemRepository postagemRepository;

	@GetMapping
	// Informando que o m√©todo GetAll abaixo ir√° retornar uma requisi√ß√£o GET
	public ResponseEntity<List<Postagem>> getAll() {
		// O get All quer dizer que ele vai responder toda requisi√ß√£o do tipo HTPP GET
		// que for pro endereco : http://localhost:8080/postagens/.

		// ATEN√á√ÉO: O Endere√ßo do endpoint ser√° igual ao Endere√ßo do Recurso
		// (@RequestMapping) apenas quando a anota√ß√£o @GetMapping n√£o possuir um
		// endere√ßo personalizado, como um par√¢metro por exemplo. Caso existam dois ou
		// mais M√©todos do tipo GET ser√° necess√°rio personalizar o
		// endere√ßo de cada M√©todo anotado com @GetMapping, pois n√£o pode existir
		// endere√ßos duplicados.

		// O m√©todo getAll √© do tipo responseEntity porque ele vai responder a
		// requisi√ß√£o http com uma resposta http
		// Esse m√©todo ter√° como retorno um objeto da classe ResponseEntity e no
		// parametro body ser√° um objeto da classe List
		return ResponseEntity.ok(postagemRepository.findAll());
		// Mas por que eu n√£o chamei a lista na hora de fazer o return?
		// A raz√£o para n√£o chamar diretamente a lista no retorno do m√©todo est√°
		// relacionada ao encapsulamento da resposta HTTP.
		// A classe ResponseEntity fornece um meio de incluir informa√ß√µes adicionais
		// sobre a resposta HTTP, como headers, status code,
		// etc. Ao encapsular a lista de postagens dentro de ResponseEntity.ok(...),
		// voc√™ est√° indicando explicitamente que a opera√ß√£o
		// foi bem-sucedida (c√≥digo 200 OK) e est√° incluindo o corpo da resposta, que √©
		// a lista de postagens.

		// Se voc√™ chamasse diretamente postagemRepository.findAll() sem envolv√™-lo em
		// ResponseEntity.ok(...), estaria retornando apenas
		// a lista de postagens, sem qualquer informa√ß√£o adicional relacionada √†
		// resposta HTTP. Isso pode ser apropriado em alguns casos,
		// mas usar ResponseEntity oferece maior flexibilidade ao lidar com diferentes
		// casos de resposta e permite definir cabe√ßalhos HTTP
		// e status personalizados, se necess√°rio.

	}

	@GetMapping("/titulo/{titulo}")
	public ResponseEntity<List<Postagem>> getByTitulo(@PathVariable String titulo) {
		return ResponseEntity.ok(postagemRepository.findByTituloContainingIgnoreCase(titulo));
		// ATEN√á√ÉO: Por que aqui a gente n√£o fez um map ,else ? Todo m√©todo que tem como
		// retorno
		// uma lista,auomaticamente ela ser√° gerada,ent√£o caso ele n√£o encontre ainda
		// assim ser√°
		// retornado uma lista vazia
	}

	@GetMapping("/id/{id}")
	// Pedir o id(Vari√°vel de caminho / Path Variable) da postagem que quer ser
	// puxada
	public ResponseEntity<Postagem> getById(@PathVariable Long id) {
		// Dessa vez ser√° retornada apenas uma postagem
		// O PathVariable insere o valor que for passado no endere√ßo do endpoint
		return postagemRepository.findById(id).map(resposta -> ResponseEntity.ok(resposta))
				// Se for encontrado alguma postagem o id informado,cai dentro do map(Optional)
				// dentro do resposta ser√° mapeado o objeto que foi encontrado,e logo ap√≥s
				// retorna o objeto e tamb√©m o Status HTTP(200)
				.orElse(ResponseEntity.status(HttpStatus.NOT_FOUND).build());
		// Outra forma de fazer : .orElse(ResponseEntity.notFound().build());
		// Se n√£o for encontrado,cai aqui dentro,ser√° retornado o HTTP (404 - NOT FOUND)
		// eu defini que o status dessa requisi√ß√£o ser√° como not_found,quando eu preciso
		// definir o status da requisi√ß√£o,eu preciso usar o .build() para √© necess√°rio
		// para finalizar a constru√ß√£o da inst√¢ncia e retorn√°-la

	}

	@PostMapping
	// Usando o post pois est√° sendo feito um metodo que ir√° postar algo

	public ResponseEntity<Postagem> post(@Valid @RequestBody Postagem postagem) {
		// Valid : Esta anota√ß√£o valida o Objeto Postagem enviado no Corpo da Requisi√ß√£o
		// (Request Body), conforme as regras definidas na Model
		// Postagem (@NotNull, @NotBlank, @Size e etc).Ele vai validar a postagem que
		// est√° sendo enviada

		// RequestBody Postagem postagem : recebe o Objeto do tipo Postagem, que foi
		// enviado no Corpo da Requisi√ß√£o (Request Body), no formato JSON e
		// insere no par√¢metro postagem do M√©todo post.

		return ResponseEntity.status(HttpStatus.CREATED).body(postagemRepository.save(postagem));
		// HTTP Status CREATEDü°™201 se o Objeto foi persistido no Banco de dados.
		// O postagemRepository.save esta usando um m√©todo que foi puxado da interface
		// JPARepository

	}
	
	
	@PutMapping
	// Eu vou atualizar uma postagem j√° existente
	public ResponseEntity<Postagem> put(@Valid @RequestBody Postagem postagem) {
		return postagemRepository.findById(postagem.getId())
				// procurando se j√° existe uma postagem com o id informado
				// A gente cria esse findById,porque o metodo save(usado na linha de baixo)ele
				// serve tanto pra atualizar
				// quanto pra criar,ent√£o pra n√£o correr o risco dele criar e duplicar,primeiro
				// a gente procura a postagem
				// pelo id

				.map(resposta -> ResponseEntity.status(HttpStatus.OK).body(postagemRepository.save(postagem)))
				// Se a postagem j√° existir, este trecho de c√≥digo vai ser executado. Ele est√°
				// criando uma resposta dizendo que a
				// opera√ß√£o foi bem-sucedida (HttpStatus.OK), e ele tamb√©m est√° atualizando a
				// postagem
				.orElse(ResponseEntity.status(HttpStatus.NOT_FOUND).build());
		// se n√£o existir a postagem com o id informado,ele cai no erro 404(not found)

	}
	
	@ResponseStatus(HttpStatus.NO_CONTENT)
	// Eu estou falando que caso a requisi√ß√£o aconte√ßa corretamente,ele retorna um
	// HTTP No_content(204)
	// ao inv√©s de retornar OK(200)
	@DeleteMapping("/{id}")
	// passando o id da publica√ß√£o que eu quero apagar
	public void delete(@PathVariable Long id) {
		Optional<Postagem> postagem = postagemRepository.findById(id);
		// Caso n√£o seja encontrado a postagem com o id informado,gra√ßas ao Optional ele
		// ir√° encapsular a resposta do M√©todo findById(id)
		// e evitar o erro NullPointerException.
		if (postagem.isEmpty()) {
			throw new ResponseStatusException(HttpStatus.NOT_FOUND);
		}

		postagemRepository.deleteById(id);
		// Aqui ele est√° removendo,retorna uma NO_CONTENT 204

	}
	
}
